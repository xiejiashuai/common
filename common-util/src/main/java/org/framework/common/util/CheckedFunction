
import java.util.function.Function;

/**
 * Function函数式变形
 * <p>
 * 适用于入参为T，返回值为R，且抛出{@link Exception}类型
 *
 * @author jiashuai.xie
 * @since 1.0.0.RELEASE
 */
@FunctionalInterface
public interface CheckedFunction<T, R> {

    /**
     * 将入参T转换为R类型
     *
     * @param t 入参
     * @return 返回R类型
     * @throws Exception
     */
    R apply(T t) throws Exception;

    /**
     * 将{@link CheckedFunction}转换为{@link Function}
     * 如果调用function#apply出现异常将抛出异常，进而终止函数式操作
     *
     * @param function 表达式
     * @param <T>      {@link CheckedFunction}的入参类型
     * @param <R>      {@link CheckedFunction}的出参类型
     * @return {@link Function} 类型
     */
    static <T, R> Function<T, R> transform(CheckedFunction<T, R> function) {
        return t -> {
            try {
                return function.apply(t);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        };
    }

    /**
     * 将{@link CheckedFunction}转换为{@link Function}
     * <p>
     * 如果调用function#apply出现异常将异常信息返回，不终止函数式操作
     *
     * @param function 处理表达式
     * @param <T>      {@link CheckedFunction}的入参类型
     * @param <L>      {@link Either}左支类型
     * @param <R>      {@link Either}右支类型
     * @return
     */
    static <T, R> Function<T, Either> transformEither(CheckedFunction<T, R> function) {
        return t -> {
            try {
                // 成功返回
                return Either.right(function.apply(t));
            } catch (Exception e) {
                // 异常返回
                return Either.left(e);
            }
        };
    }

    /**
     * 将{@link CheckedFunction}转换为{@link Function}
     * <p>
     * 如果调用function#apply出现异常将异常信息和原始参数值返回，不终止函数式操作
     *
     * @param function 处理表达式
     * @param <T>      {@link CheckedFunction}的入参类型
     * @param <R>      {@link Either}右支类型
     * @return
     */
    static <T, R> Function<T, Either> transformEitherWithValue(CheckedFunction<T, R> function) {
        return t -> {
            try {
                // 成功返回
                return Either.right(function.apply(t));
            } catch (Exception e) {
                // 异常返回 并且把原始值t返回过去
                return Either.left(Pair.of(e, t));
            }
        };
    }
}
