package com.envision.dubbo.provider.lambda;

import java.util.Optional;
import java.util.function.Function;

/**
 * 该类代表两种可能性，要么是左支left，要么是右支right，不可能二者兼有
 * <p>
 *     在处理异常时，left一般代表异常，右支代表成功执行返回的结果
 * </p>
 *
 * @author jiashuai.xie
 * @since 1.0.0.RELEASE
 * @param <L> 左支
 * @param <R> 右支
 */
public class Either<L, R> {

    private final L left;

    private final R right;

    private Either(L left, R right) {
        this.left = left;
        this.right = right;
    }

    public static <L, R> Either<L, R> left(L left) {
        return new Either(left, null);
    }

    public static <L, R> Either<L, R> right(R value) {
        return new Either(null, value);
    }

    public Optional<L> getLeft() {
        return Optional.ofNullable(left);
    }

    public Optional<R> getRight() {
        return Optional.ofNullable(right);
    }

    public boolean isLeft() {
        return left != null;
    }

    public boolean isRight() {
        return right != null;
    }

    public <T> Optional<T> mapLeft(Function<? super L, T> mapper) {
        if (isLeft()) {
            return Optional.of(mapper.apply(left));
        }
        return Optional.empty();
    }

    public <T> Optional<T> mapRight(Function<? super R, T> mapper) {
        if (isRight()) {
            return Optional.of(mapper.apply(right));
        }
        return Optional.empty();
    }

    @Override
    public String toString() {
        if (isLeft()) {
            return "Left(" + left + ")";
        }
        return "Right(" + right + ")";
    }
}
